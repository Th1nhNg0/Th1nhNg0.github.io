[{"categories":[],"content":"Giới thiệu Alan Mathison Turing (23/06/1912 – 07/06/1954) là một nhà toán học, nhà khoa học máy tính, logic học, nhà phân tích mật mã, triết gia , và nhà sinh học lý thuyết. Turing có ảnh hưởng lớn đến sự phát triển của ngành khoa học máy tính, cung cấp các khái niệm về tính toán và thuật toán bằng công trình máy Turing của mình, có thể coi là một mô hình của máy tính đa năng. Turing được nhiều người coi là cha đẻ của ngành khoa học máy tính và trí tuệ nhân tạo. Alan Turing, hình chụp năm 1928 vào lúc ông 26 tuổi Những năm đầu đời và quá trình học vấn ","date":"06-16-2021","objectID":"/alan-turing/:0:0","tags":["history"],"title":"Alan Turing","uri":"/alan-turing/"},{"categories":[],"content":"Gia đình Turing được sinh ra tại Maida Vale, London. Cha của Turing, Julius Mathison Turing (1873–1947) là con trai của một giáo sĩ, Mục sư John Robert Turing, xuất thân từ một gia đình thương nhân Scotland có trụ sở tại Hà Lan và là một nam tước. Mẹ của Turing, Ethel Sara Turing (1881–1976) con gái của Edward Waller Stoney, kỹ sư trưởng của Đường sắt Madras, Stoneys là một gia đình quý tộc Anh-Ireland theo đạo Tin lành. Công việc của Julius với ICS đã đưa gia đình đến Ấn Độ thuộc Anh, nơi ông nội của anh từng là tướng trong Quân đội Bengal. Tuy nhiên, cả Julius và Ethel đều muốn con cái của họ được lớn lên ở Anh, vì vậy họ chuyển đến Maida Vale, London, nơi Alan Turing sinh ra vào ngày 23 tháng 6 năm 1912, được ghi lại bởi một tấm bảng màu xanh bên ngoài ngôi nhà. Nơi sinh của Turing sau này là Khách sạn Colonnade. Turing có một người anh trai, John (cha của Sir John Dermot Turing, Nam tước thứ 12 của các nam tước Turing). Ủy ban công vụ của cha Turing vẫn hoạt động và trong những năm thơ ấu của Turing, cha mẹ ông thường xuyên đi lại giữa Hastings ở Vương quốc Anh và Ấn Độ, để hai con trai của họ ở lại với một cặp vợ chồng trong quân đội đã nghỉ hưu. Tại Hastings, Turing ở tại Baston Lodge, Upper Maze Hill, St Leonards-on-Sea, hiện được đánh dấu bằng một tấm bảng màu xanh lam, tấm bảng được công bố vào ngày 23 tháng 6 năm 2012, kỷ niệm một trăm năm ngày sinh của Turing. Ngay từ rất sớm khi còn nhỏ, Turing đã cho thấy những dấu hiệu của một thiên tài mà sau này ông được thể hiện một cách nổi bật. Cha mẹ ông mua một căn nhà ở Guildford vào năm 1927, và Turing sống ở đó trong những ngày nghỉ học. Vị trí này cũng được đánh dấu bằng một tấm bảng màu xanh lam. ","date":"06-16-2021","objectID":"/alan-turing/:1:0","tags":["history"],"title":"Alan Turing","uri":"/alan-turing/"},{"categories":[],"content":"Trường học Vào năm 6 tuổi, Alan Turing được học tại trường St Michael’s nằm ở số 20 đường Charles Road, St Leonards-on-Sea. Hiệu trưởng đã sớm nhận ra tài năng của ông, cũng như nhiều giáo viên đã từng dạy ông. Từ tháng 1 năm 1922 đến năm 1926, Turing được học tại Hazelhurst Preparatory School, một trường độc lập ở làng Frant ở Sussex (nay là East Sussex). Năm 1926, ở tuổi 13, ông theo học tại Trường Sherborne, một trường độc lập nội trú ở thị trấn chợ Sherborne ở Dorset, nơi ông nội trú tại Westcott House. Năng khiểu của Turing đối với toán học và khoa học đã khiến ông không được một số giáo viên tại Sherborne tôn trọng. Hiệu trưởng của ông đã viết cho cha mẹ của ông: “I hope he will not fall between two stools. If he is to stay at public school, he must aim at becoming educated. If he is to be solely a Scientific Specialist, he is wasting his time at a public school”. Mặc dù vậy, Turing vẫn tiếp tục thể hiện khả năng vượt trội trong các nghiên cứu mà ông yêu thích, giải các bài toán nâng cao vào năm 1927 mà không cần học đến phép tính cơ bản. Năm 1928, ở tuổi 16, Turing bắt gặp tác phẩm của Albert Einstein. Ông không chỉ nắm được nó mà còn có thể suy ra câu hỏi của Einstein về các định luật chuyển động của Newton từ một văn bản mà điều này chưa bao giờ được công bố rõ ràng. ","date":"06-16-2021","objectID":"/alan-turing/:2:0","tags":["history"],"title":"Alan Turing","uri":"/alan-turing/"},{"categories":[],"content":"Người bạn Christopher Morcom Christopher Morcom Tại Sherborne, Turing kết bạn với Christopher Collan Morcom (13/07/1911 - 13/02/1930), người được coi là “mối tình đầu” của Turing. Mối quan hệ của họ đã tạo nguồn cảm hứng cho những nỗ lực trong tương lai của Turing, nhưng nó đã bị cắt ngang bởi cái chết của Morcom, vào tháng 2 năm 1930, do biến chứng của bệnh lao bò, mắc bệnh sau khi uống sữa bò bị nhiễm bệnh vài năm trước đó. Sự kiện này đã khiến Turing vô cùng đau buồn. Ông ấy đã đối phó với nỗi đau của mình bằng cách làm việc chăm chỉ hơn nhiều về các chủ đề khoa học và toán học mà ông đã chia sẻ với Morcom. Trong một bức thư gửi cho mẹ của Morcom, Frances Isobel Morcom, Turing đã viết: I am sure I could not have found anywhere another companion so brilliant and yet so charming and unconceited. I regarded my interest in my work, and in such things as astronomy (to which he introduced me) as something to be shared with him and I think he felt a little the same about me … I know I must put as much energy if not as much interest into my work as if he were alive, because that is what he would like me to do. Mối quan hệ của Turing với mẹ của Morcom tiếp tục kéo dài sau cái chết của Morcom, với việc bà gửi quà cho Turing, và ông gửi thư, thường là vào ngày sinh nhật của Morcom. Một ngày trước ngày giỗ thứ ba của Morcom (13/02/1933), ông đã viết cho bà Morcom: I expect you will be thinking of Chris when this reaches you. I shall too, and this letter is just to tell you that I shall be thinking of Chris and of you tomorrow. I am sure that he is as happy now as he was when he was here. Your affectionate Alan. Một số người đã suy đoán rằng cái chết của Morcom là nguyên nhân dẫn đến chủ nghĩa vô thần và chủ nghĩa duy vật của Turing. Rõ ràng, tại thời điểm này trong cuộc đời, ông vẫn tin vào những khái niệm như một linh hồn, không phụ thuộc vào thể xác và cái chết. Trong một bức thư sau đó, cũng được viết cho mẹ của Morcom, Turing viết: Personally, I believe that spirit is really eternally connected with matter but certainly not by the same kind of body … as regards the actual connection between spirit and body I consider that the body can hold on to a ‘spirit’, whilst the body is alive and awake the two are firmly connected. When the body is asleep I cannot guess what happens but when the body dies, the ‘mechanism’ of the body, holding the spirit is gone and the spirit finds a new body sooner or later, perhaps immediately. ","date":"06-16-2021","objectID":"/alan-turing/:3:0","tags":["history"],"title":"Alan Turing","uri":"/alan-turing/"},{"categories":[],"content":"Đại học Sau khi tốt nghiệp trường Sherborne, Turing theo học đại học từ năm 1931 đến năm 1934 tại trường đại học King, Cambridge, nơi ông được trao bằng danh dự hạng nhất về toán học. Năm 1935, ở tuổi 22, ông được bầu làm Viện sĩ của Đại học King nhờ một luận án mà trong đó, ông đã chứng minh định lý giới hạn trung tâm (Central limit theorem). King's College, Cambridge, nơi Turing là sinh viên năm 1931 và trở thành Nghiên cứu sinh năm 1935. Phòng máy tính được đặt theo tên của ông Năm 1936, Turing xuất bản bài báo “On Computable Numbers, with an Application to the Entscheidungsproblem”. Bài báo đã được xuất bản trên tạp chí Proceedings of the London Mathematics Society thành hai phần, phần đầu tiên vào ngày 30 tháng 11 và phần thứ hai vào ngày 23 tháng 12. Trong bài báo này, Turing đã định dạng lại các kết quả năm 1931 của Kurt Gödel về các giới hạn của chứng minh và tính toán, thay thế ngôn ngữ hình thức dựa trên số học phổ thông của Gödel bằng các thiết bị giả thuyết chính thức và đơn giản được gọi là máy Turing. Bài toán Entscheidungsproblem (bài toán quyết định) ban đầu được đặt ra bởi nhà toán học người Đức David Hilbert vào năm 1928. Turing đã chứng minh rằng “máy tính vạn năng” (universal computing machine) của ông sẽ có khả năng thực hiện bất kỳ phép tính toán học nào có thể tưởng tượng được nếu nó có thể biểu diễn dưới dạng một thuật toán. Ông tiếp tục chứng minh rằng không có giải pháp cho vấn đề quyết định bằng cách đầu tiên chỉ ra rằng vấn đề tạm dừng đối với máy Turing là không thể quyết định: không thể quyết định theo thuật toán liệu máy Turing có bao giờ dừng lại hay không. Bài báo này đã được gọi là “easily the most influential math paper in history”. Một đoạn ngắn bài báo của ông Mặc dù chứng minh của Turing được xuất bản ngay sau chứng minh tương đương của Alonzo Church bằng cách sử dụng phép tính lambda của ông, cách tiếp cận của Turing dễ tiếp cận và trực quan hơn đáng kể so với của Church. Nó cũng bao gồm khái niệm về ‘Máy vạn năng’ (ngày nay được gọi là máy Turing đa năng), với ý tưởng rằng một chiếc máy như vậy có thể thực hiện các nhiệm vụ của bất kỳ chiếc máy tính nào khác (có thể là phép tính lambda của Church). Theo luận điểm của Church – Turing, máy Turing và máy tính lambda có khả năng tính toán bất cứ thứ gì có thể tính toán được. John von Neumann thừa nhận rằng khái niệm trung tâm của máy tính hiện đại là do bài báo của Turing. Cho đến ngày nay, máy Turing là đối tượng nghiên cứu trung tâm của lý thuyết tính toán. Từ tháng 9 năm 1936 đến tháng 7 năm 1938, Turing dành phần lớn thời gian học tập dưới sự điều hành của Church tại Đại học Princeton, trong năm thứ hai với tư cách là Nghiên cứu sinh của Jane Eliza Procter. Ngoài công việc thuần túy về toán học của mình, ông còn nghiên cứu về mật mã học và cũng đã xây dựng ba trong bốn giai đoạn của hệ số nhân nhị phân cơ điện. Vào tháng 6 năm 1938, ông lấy bằng Tiến sĩ tại Khoa Toán học tại Princeton; luận án của ông, Hệ thống lôgic dựa trên thứ tự (Systems of Logic Based on Ordinals), đã đưa ra khái niệm lôgic thứ tự và khái niệm về tính toán tương đối, trong đó Máy Turing được tăng cường với cái gọi là oracles, cho phép nghiên cứu các vấn đề mà máy Turing không thể giải quyết được. John von Neumann muốn thuê Turing làm trợ lý sau tiến sĩ, nhưng ông đã quay trở lại Vương quốc Anh. Sự nghiệp và các công trình nghiên cứu Khi Turing trở lại Cambridge, ông tham dự các bài giảng của Ludwig Wittgenstein vào năm 1939 về nền tảng của toán học. Các bài giảng đã được xây dựng lại nguyên văn, bao gồm các đoạn xen giữa Turing và các sinh viên khác, từ các ghi chú của sinh viên. Turing và Wittgenstein tranh luận và không đồng ý, Turing bảo vệ chủ nghĩa hình thức và Wittgenstein đề xuất quan điểm của mình rằng toán học không khám phá ra bất kỳ chân lý tuyệt đối nào, mà là phát minh ra chúng. ","date":"06-16-2021","objectID":"/alan-turing/:4:0","tags":["history"],"title":"Alan Turing","uri":"/alan-turing/"},{"categories":[],"content":"Giải mã tại Bletchley Park Trong Chiến tranh thế giới thứ hai, Bletchley Park là căn cứ địa của đơn vị phá mã ưu tú của Tình báo Anh. Turing tham gia Bộ luật Chính phủ và Trường Cypher và vào tháng 9 năm 1939, khi chiến tranh với Đức bắt đầu, ông báo cáo đến Bletchley Park ở Buckinghamshire để làm nhiệm vụ. Không lâu trước khi Turing đến Bletchley, các nhân viên tình báo Ba Lan đã cung cấp cho người Anh thông tin về cỗ máy Enigma của Đức. Các nhà phân tích mật mã Ba Lan đã phát triển một máy phá mã được gọi là Bomba, nhưng Bomba trở nên vô dụng vào năm 1940 khi các quy trình tình báo của Đức thay đổi và Bomba không thể bẻ mã được nữa. Turing, cùng với đồng nghiệp phá mã Gordon Welchman, đã bắt tay vào xây dựng một bản sao của Bomba, được gọi là Bombe, được sử dụng để chặn hàng nghìn tin nhắn của Đức mỗi tháng. Những mật mã bị hỏng này sau đó được chuyển tiếp cho các lực lượng Đồng minh, và phân tích của Turing về tình báo hải quân Đức cho phép người Anh giữ các đoàn tàu của họ tránh xa các tàu chiến của đối phương. Máy Bombe Trước khi chiến tranh kết thúc, Turing đã phát minh ra thiết bị xáo trộn giọng nói. Ông đặt tên cho nó là Delilah , và nó được sử dụng để bóp méo các thông điệp giữa quân đội Đồng minh, để các nhân viên tình báo Đức không thể đánh chặn thông tin. Mặc dù phạm vi công việc của mình không được công khai cho đến những năm 1970, Turing đã được bổ nhiệm làm Sĩ quan của Lệnh của Đế quốc Anh (OBE) vào năm 1946 vì những đóng góp của ông cho thế giới tình báo và đột phá. ","date":"06-16-2021","objectID":"/alan-turing/:5:0","tags":["history"],"title":"Alan Turing","uri":"/alan-turing/"},{"categories":[],"content":"Hut 8 and the naval Enigma Turing quyết định giải quyết vấn đề đặc biệt khó khăn về Enigma của hải quân Đức “bởi vì không ai khác làm bất cứ điều gì về nó và tôi có thể tự giải quyết vấn đề này”. Vào tháng 12 năm 1939, Turing đã giải quyết được phần thiết yếu của hệ thống chỉ thị hải quân, hệ thống này phức tạp hơn các hệ thống chỉ thị được sử dụng bởi các dịch vụ khác. Cùng đêm đó, ông cũng nảy ra ý tưởng về Banburismus, một kỹ thuật thống kê tuần tự (cái mà sau này Abraham Wald gọi là phân tích tuần tự) để hỗ trợ việc phá vỡ Bí ẩn của hải quân, “mặc dù tôi không chắc rằng nó sẽ hoạt động trong thực tế, và không. , trên thực tế, chắc chắn cho đến một số ngày đã thực sự bị phá vỡ.” Vì vậy, ông đã phát minh ra một thước đo trọng lượng bằng chứng mà ông gọi là lệnh cấm. Banburismus có thể loại trừ một số trình tự nhất định của rôto Enigma, giảm đáng kể thời gian cần thiết để kiểm tra các thiết lập trên bom. Sau đó, quy trình tuần tự này nhằm thu thập đủ trọng lượng bằng chứng bằng cách sử dụng deciban (một phần mười lệnh cấm) đã được sử dụng trong Phân tích mật mã của mật mã Lorenz. Turing đến Hoa Kỳ vào tháng 11 năm 1942 và làm việc với các nhà phân tích mật mã của Hải quân Hoa Kỳ về việc chế tạo máy bay ném bom và tàu Enigma của hải quân ở Washington; ông cũng đã đến thăm Phòng thí nghiệm Máy tính của họ ở Dayton, Ohio. Phản ứng của Turing đối với thiết kế máy bay ném bom của Mỹ khác xa với sự nhiệt tình: Chương trình Bombe của Mỹ nhằm sản xuất 336 quả bom, một quả cho mỗi đơn đặt hàng bánh xe. Tôi đã từng mỉm cười trong lòng với quan niệm về thói quen túp lều Bombe được ngụ ý bởi chương trình này, nhưng nghĩ rằng không có mục đích cụ thể nào được phục vụ bằng cách chỉ ra rằng chúng tôi sẽ không thực sự sử dụng chúng theo cách đó. Thử nghiệm của họ (về cổ góp) khó có thể được coi là kết luận vì họ không thử nghiệm độ nảy với các thiết bị tìm điểm dừng điện tử. Dường như không ai được nói về que hoặc bộ phận giảm tốc hoặc banburismus trừ khi họ thực sự định làm điều gì đó về nó. Trong chuyến đi này, ông cũng đã hỗ trợ Bell Labs trong việc phát triển các thiết bị phát âm an toàn. Ông trở lại Bletchley Park vào tháng 3 năm 1943. Trong thời gian vắng mặt, Hugh Alexander đã chính thức đảm nhận vị trí người đứng đầu Hut 8, mặc dù Alexander trên thực tế đã đứng đầu một thời gian (Turing không mấy quan tâm đến hoạt động hàng ngày của phần). Turing trở thành nhà tư vấn chung về phân tích mật mã tại Bletchley Park. Alexander đã viết về đóng góp của Turing: Không ai có thể nghi ngờ rằng công việc của Turing là yếu tố lớn nhất dẫn đến thành công của Hut 8. Trong những ngày đầu, ông là nhà mật mã học duy nhất nghĩ rằng vấn đề đáng phải giải quyết và ông không chỉ chịu trách nhiệm chính về công việc lý thuyết chính trong Hut mà còn chia sẻ với Welchman và Keen công lao chính về việc phát minh ra máy bay ném bom. Luôn khó để nói rằng bất cứ ai là ‘tuyệt đối không thể thiếu’, nhưng nếu ai đã không thể thiếu trong Hut 8, thì đó chính là Turing. Công việc của người tiên phong luôn có xu hướng bị lãng quên khi kinh nghiệm và thói quen sau này khiến mọi thứ trở nên dễ dàng và nhiều người trong chúng tôi ở Hut 8 cảm thấy rằng tầm quan trọng của đóng góp của Turing không bao giờ được thế giới bên ngoài nhận ra đầy đủ. ","date":"06-16-2021","objectID":"/alan-turing/:6:0","tags":["history"],"title":"Alan Turing","uri":"/alan-turing/"},{"categories":[],"content":"Delilah Sau khi làm việc tại Bell Labs ở Hoa Kỳ, Turing theo đuổi ý tưởng về quy tắc điện tử của lời nói trong hệ thống điện thoại. Trong phần sau của cuộc chiến, ông chuyển đến làm việc cho Cơ quan An ninh Vô tuyến của Cơ quan Mật vụ (sau này là HMGCC) tại Công viên Hanslope. Tại công viên, ông phát triển thêm kiến ​​thức về điện tử với sự hỗ trợ của kỹ sư Donald Bayley. Họ cùng nhau tiến hành thiết kế và chế tạo một máy liên lạc thoại di động an toàn có tên mã là Delilah. Máy được thiết kế cho các ứng dụng khác nhau, nhưng nó thiếu khả năng sử dụng với các đường truyền vô tuyến đường dài. Trong mọi trường hợp, Delilah đã được hoàn thành quá muộn để được sử dụng trong chiến tranh. Mặc dù hệ thống hoạt động đầy đủ, với việc Turing chứng minh nó với các quan chức bằng cách mã hóa và giải mã bản ghi âm bài phát biểu của Winston Churchill, Delilah đã không được chấp nhận để sử dụng. Turing cũng đã tham vấn với Bell Labs về việc phát triển SIGSALY, một hệ thống thoại an toàn được sử dụng trong những năm cuối của chiến tranh. ","date":"06-16-2021","objectID":"/alan-turing/:7:0","tags":["history"],"title":"Alan Turing","uri":"/alan-turing/"},{"categories":[],"content":"Máy tính sơ khai và bài kiểm tra Turing Từ năm 1945 đến năm 1947, Turing sống ở Hampton, London, trong khi ông làm việc trên thiết kế của ACE (Động cơ Máy tính Tự động) tại Phòng thí nghiệm Vật lý Quốc gia (NPL). Ông đã trình bày một bài báo vào ngày 19 tháng 2 năm 1946, đây là thiết kế chi tiết đầu tiên của một máy tính chương trình lưu trữ. Bản thảo báo cáo đầu tiên chưa hoàn chỉnh của Von Neumann về EDVAC đã có trước bài báo của Turing, nhưng nó ít chi tiết hơn nhiều và theo John R. Womersley, Giám đốc của Bộ phận Toán học NPL, nó “chứa một số ý tưởng là của Tiến sĩ Turing. riêng ”. Mặc dù ACE là một thiết kế khả thi, nhưng sự bí mật xung quanh công việc thời chiến tại Bletchley Park đã dẫn đến sự chậm trễ trong việc khởi động dự án và khiến ông vỡ mộng. Cuối năm 1947, ông trở lại Cambridge trong một năm nghỉ phép, khi đó ông đã tạo ra một tác phẩm lớn về Máy móc thông minh chưa được xuất bản trong cuộc đời của mình. Trong khi ông ở Cambridge, Pilot ACE đã được chế tạo khi ông vắng mặt. Nó thực hiện chương trình đầu tiên vào ngày 10 tháng 5 năm 1950, và một số máy tính sau này trên khắp thế giới mắc nợ nó rất nhiều, bao gồm cả English Electric DEUCE và American Bendix G-15. Phiên bản đầy đủ của Turing’s ACE không được xây dựng cho đến sau khi ông qua đời. Pilot ACE Theo hồi ký của nhà tiên phong máy tính người Đức Heinz Billing từ Viện Vật lý Max Planck, được xuất bản bởi Genscher, Düsseldorf, có một cuộc gặp giữa Turing và Konrad Zuse. Nó diễn ra ở Göttingen vào năm 1947. Những người tham gia là Womersley, Turing, Porter từ Anh và một số nhà nghiên cứu người Đức như Zuse, Walther và Billing. Năm 1948, Turing được bổ nhiệm làm độc giả trong Khoa Toán học tại Đại học Victoria của Manchester. Một năm sau, ông trở thành Phó Giám đốc Phòng thí nghiệm Máy tính, nơi ông làm việc trên phần mềm cho một trong những máy tính được lưu trữ chương trình sớm nhất - Manchester Mark 1. Turing đã viết phiên bản đầu tiên của Sách hướng dẫn lập trình cho chiếc máy này và được tuyển dụng. bởi Ferranti với tư cách là nhà tư vấn trong việc phát triển chiếc máy thương mại hóa của họ, Ferranti Mark 1. Ông tiếp tục được Ferranti trả phí tư vấn cho đến khi qua đời. Trong thời gian này, ông tiếp tục làm các công việc trừu tượng hơn trong toán học, và trong “Computing Machinery and Intelligence” (Mind, tháng 10 năm 1950), Turing giải quyết vấn đề trí tuệ nhân tạo và đề xuất một thí nghiệm được gọi là Turing Test, một nỗ lực để xác định một tiêu chuẩn cho một cỗ máy được gọi là “thông minh”. Ý tưởng là một máy tính có thể được cho là “suy nghĩ” nếu người thẩm vấn không thể phân biệt nó với con người. Trong bài báo, Turing gợi ý rằng thay vì xây dựng một chương trình để mô phỏng tâm trí của người lớn, tốt hơn nên tạo ra một chương trình đơn giản hơn để mô phỏng tâm trí của một đứa trẻ và sau đó đưa nó vào một quá trình giáo dục. Một dạng đảo ngược của bài kiểm tra Turing được sử dụng rộng rãi trên Internet: kiểm tra CAPTCHA nhằm xác định xem người dùng là người hay máy tính. Năm 1948 Turing, làm việc với đồng nghiệp cũ của mình, D.G. Champernowne, bắt đầu viết một chương trình cờ vua cho một máy tính chưa tồn tại. Đến năm 1950, chương trình được hoàn thành và được đặt tên là Turochamp. Năm 1952, ông cố gắng thực hiện nó trên chiếc Ferranti Mark 1, nhưng không đủ năng lượng, máy tính không thể thực hiện chương trình. Thay vào đó, Turing “chạy” chương trình bằng cách lật qua các trang của thuật toán và thực hiện các hướng dẫn của nó trên bàn cờ vua, mất khoảng nửa giờ cho mỗi nước đi. Trò chơi đã được ghi lại.Theo Garry Kasparov, chương trình của Turing “chơi một ván cờ dễ nhận biết.” Chương trình đã thua Alick Glennie, đồng nghiệp của Turing, mặc dù người ta nói rằng nó đã thắng một ván trước Isabel, vợ của Champernowne. Thử nghiệm Turing của ông là một đóng góp quan trọng, mang tính đặc trưng và lâu dài cho cuộc tranh luận liên quan đến trí tuệ nhân tạo, vẫn tiếp tục sau hơn nửa thế kỷ. ","date":"06-16-2021","objectID":"/alan-turing/:8:0","tags":["history"],"title":"Alan Turing","uri":"/alan-turing/"},{"categories":[],"content":"Sự hình thành khuôn mẫu và toán sinh học Khi Turing 39 tuổi vào năm 1951, ông chuyển sang toán sinh học, cuối cùng xuất bản kiệt tác của mình “The Chemical Basis of Morphogenesis” vào tháng 1 năm 1952. Ông quan tâm đến hình thái học, sự phát triển của các mô hình và hình dạng trong các sinh vật sinh học. Ông gợi ý rằng một hệ thống các chất hóa học phản ứng với nhau và khuếch tán trong không gian, được gọi là hệ thống phản ứng-khuếch tán, có thể giải thích cho “các hiện tượng chính của hình thái”. Ông đã sử dụng hệ thống phương trình vi phân riêng để mô hình hóa các phản ứng hóa học có xúc tác. Ví dụ, nếu chất xúc tác A là cần thiết để một phản ứng hóa học nào đó xảy ra và nếu phản ứng tạo ra nhiều chất xúc tác A hơn, thì chúng ta nói rằng phản ứng là tự xúc tác và có phản hồi dương có thể được mô hình hóa bằng vi phân phi tuyến. các phương trình. Turing phát hiện ra rằng các mẫu có thể được tạo ra nếu phản ứng hóa học không chỉ tạo ra chất xúc tác A mà còn tạo ra chất ức chế B làm chậm quá trình sản xuất A. Nếu A và B sau đó khuếch tán qua bình chứa với tốc độ khác nhau, thì bạn có thể có một số vùng nơi A thống trị và một số nơi B đã làm. Để tính toán mức độ của điều này, Turing sẽ cần một máy tính mạnh mẽ, nhưng chúng không được cung cấp tự do vào năm 1951, vì vậy ông phải sử dụng các phép gần đúng tuyến tính để giải các phương trình bằng tay. Các phép tính này cho kết quả định tính phù hợp, và tạo ra, ví dụ, một hỗn hợp đồng nhất đến mức kỳ lạ là có các chấm đỏ cố định cách đều nhau. Nhà hóa sinh người Nga Boris Belousov đã thực hiện các thí nghiệm với kết quả tương tự, nhưng không thể công bố bài báo của mình vì định kiến ​​đương thời rằng bất kỳ điều gì như vậy đều vi phạm định luật thứ hai của nhiệt động lực học. Belousov không biết về bài báo của Turing trong Các giao dịch triết học của Hiệp hội Hoàng gia. Mặc dù được công bố trước khi cấu trúc và vai trò của DNA được hiểu rõ, công trình của Turing về sự phát sinh hình thái vẫn còn phù hợp cho đến ngày nay và được coi là một công trình quan trọng trong sinh học toán học. Một trong những ứng dụng ban đầu của giấy Turing là công trình của James Murray giải thích các đốm và sọc trên lông của mèo, lớn và nhỏ. Nghiên cứu sâu hơn trong lĩnh vực này cho thấy rằng công trình của Turing có thể giải thích một phần sự phát triển của “lông, nang lông, mô hình phân nhánh của phổi và thậm chí là sự bất đối xứng trái-phải đặt tim ở bên trái của lồng ngực.” Vào năm 2012, Sheth, et al. phát hiện ra rằng ở chuột, việc loại bỏ gen Hox gây ra sự gia tăng số lượng chữ số mà không làm tăng kích thước tổng thể của chi, cho thấy rằng gen Hox kiểm soát sự hình thành chữ số bằng cách điều chỉnh bước sóng của cơ chế kiểu Turing. Các bài báo sau đó không có sẵn cho đến khi Tác phẩm được sưu tầm của A. M. Turing được xuất bản vào năm 1992. ","date":"06-16-2021","objectID":"/alan-turing/:9:0","tags":["history"],"title":"Alan Turing","uri":"/alan-turing/"},{"categories":["programming"],"content":"Tạo một chú bot chat thông minh tự động học các tin nhắn...","date":"01-06-2021","objectID":"/chatterbot-python/","tags":["IT","Python","Artificial Intelligence"],"title":"Tạo một bot chat thông minh tự động học bằng python và Chatterbot.","uri":"/chatterbot-python/"},{"categories":["programming"],"content":"Chatterbot là gì? ChatterBot là một công cụ hội thoại dựa trên machine-learning được xây dựng bằng Python, giúp tạo phản hồi dựa vào dữ liệu từ các cuộc hội thoại đã biết. ChatterBot có thể hoạt động với một ngôn ngữ bất kì. Ví dụ 1 đoạn hội thoại: Ví dụ 1 đoạn chat trên terminal\"\rVí dụ 1 đoạn chat trên terminal\r Cách Chatterbot hoạt động Chatterbot giống như một đứa trẻ con vậy, khi vừa được sinh ra sẽ không có khả năng giao tiếp. Khi người dùng chat với Chatterbot, đoạn chat sẽ được đưa vào cơ sở dữ liệu của nó. Khi người dùng nhập nhiều câu hỏi hơn, số lượng câu trả lời và độ chính xác sẽ được tăng lên. Chương trình sẽ đưa ra câu trả lời phù hợp nhất. Xem kỹ hơn tại đây Cài đặt Chatterbot 1.0.8 ổn định ở phiên bản python 3.6.0 Cài đặt từ PyPi bằng lệnh: pip install chatterbot Chatbot đơn giản # import thư viện from chatterbot import ChatBot from chatterbot.trainers import ChatterBotCorpusTrainer # Tạo một instance chatbot với tên là Ron Obvious chatbot = ChatBot('Ron Obvious') # Tạo trainer để train bot từ các đoan hội thoại có sẵn trainer = ChatterBotCorpusTrainer(chatbot) # Các đoạn hội thoại có sẵn của chatterbot trainer.train(\"chatterbot.corpus.english\") # phản hồi từ bot với đoạn chat \"Hello\" response = chatbot.get_response(\"Hello\") print(response) Chạy đoạn code trên: Chat bot đơn giản\"\rChat bot đơn giản\r Khi chạy đoạn code trên, chatterbot mặc định sẽ tự tạo database là sqlite ở trong máy. Trong bài viết này, mình sẽ hướng dẫn các bạn kết nối bot đến database mongodb và tạo các bộ dữ liệu training cho bot. Kết nối đến database Mình sử dụng mongodb atlas được free 500mb. Cách sử dụng bạn có thể xem ở bài viết này: Viblo - Đưa dữ liệu lên mây với MongoDB Atlas Sau khi tạo database trên mongodb, các bạn làm theo những bước sau để lấy đường dẫn: Chọn Connect Cluster\"\rChọn Connect Cluster\r Chọn Connect your application\"\rChọn Connect your application\r Chọn python phiên bản 3.3, và copy đường dẫn, trong đó admin, password là tài khoản của user bạn vừa tạo trong bài viết ở trên, dbname là tên database\"\rChọn python phiên bản 3.3, và copy đường dẫn, trong đó admin, password là tài khoản của user bạn vừa tạo trong bài viết ở trên, dbname là tên database\r Thay đổi dòng thứ 6 ở đoạn code trong phần “Chatbot đơn giản” thành: chatbot = ChatBot( 'Bot thong minh', storage_adapter='chatterbot.storage.MongoDatabaseAdapter', database_uri='đường dẫn bạn vừa copy' ) Chạy thử, kết quả trên mongodb atlas: Kết quả sau khi kết nối bot đến mongodb\"\rKết quả sau khi kết nối bot đến mongodb\r Ta thấy, bộ dữ liệu có sẵn có 5620 câu chat khác nhau, nhưng chưa có tiếng việt, tiếp theo đây mình sẽ hướng dẫn bạn tạo bộ dữ liệu tiếng việt cho chatterbot. Tạo bộ dữ liệu tiếng việt ","date":"01-06-2021","objectID":"/chatterbot-python/:0:0","tags":["IT","Python","Artificial Intelligence"],"title":"Tạo một bot chat thông minh tự động học bằng python và Chatterbot.","uri":"/chatterbot-python/"},{"categories":["programming"],"content":"Định dạng dữ liệu Bộ dữ liệu của chatterbot được định dạng theo cú pháp YAML Một bộ dữ liệu bao gồm nhiều đoạn hội thoại, mỗi đoạn hội thoại có thể dài hoặc ngắn khác nhau. Ví dụ, file chaohoi.yml: conversations:- - Hello- Hi- - Chào- Chào, bạn khỏe không?- Tui khỏe, cảm ơn bạn.- - Ngày mới tốt lành!- Cảm ơn bạn- - Bạn ăn cơm chưa?- Mình ăn rồi, còn ban?- Mình chưa ăn :( ","date":"01-06-2021","objectID":"/chatterbot-python/:1:0","tags":["IT","Python","Artificial Intelligence"],"title":"Tạo một bot chat thông minh tự động học bằng python và Chatterbot.","uri":"/chatterbot-python/"},{"categories":["programming"],"content":"Tạo folder chứa bộ dữ liệu và phân loại Khi chúng ta có nhiều đoạn hội thoại theo chủ đề khác nhau, thì nên chia ra để dễ quản lí. Tạo 1 folder nằm chung thư mục với file python theo định dạng như sau: Thư mục bộ dữ liệu\"\rThư mục bộ dữ liệu\r ","date":"01-06-2021","objectID":"/chatterbot-python/:2:0","tags":["IT","Python","Artificial Intelligence"],"title":"Tạo một bot chat thông minh tự động học bằng python và Chatterbot.","uri":"/chatterbot-python/"},{"categories":["programming"],"content":"Training với bộ câu hỏi tiếng việt Thay đổi dòng thứ 12 ở đoạn code trong phần “Chatbot đơn giản” thành: trainer.train(\"./vietnamese\") # train tất cả bộ dữ liệu trong folder hoặc trainer.train(\"./vietnamese/chaohoi.yml\") # train 1 bộ dữ liệu trong folder Chạy thử chương trình: Chạy thử với bộ dữ liệu Tiếng Việt\"\rChạy thử với bộ dữ liệu Tiếng Việt\r Code Vậy là ta đã tạo ra thành công 1 con bot chat. Bạn có thể vào link github để xem thêm. Full code: from chatterbot import ChatBot from chatterbot.trainers import ChatterBotCorpusTrainer chatbot = ChatBot( 'Bot THong Minh', storage_adapter='chatterbot.storage.MongoDatabaseAdapter', database_uri='duong dan toi database', read_only=True # True nếu bạn không muốn bot tự học khi chat với user ) trainer = ChatterBotCorpusTrainer(chatbot) # comment dòng này lại để không phải train mỗi khi chạy chương trình trainer.train('./vietnamese') # chỉ train file mình muốn: # trainer.train('./vietnamese/chaohoi.yml') # chương trình đơn giản để chat trên terminal while True: try: bot_input = chatbot.get_response(input('user: ')) print('bot:', bot_input) except(KeyboardInterrupt, EOFError, SystemExit): break Mình có bonus thêm 1 đoạn code để bạn có thể train bằng tay. Chỉ cần thay đường dẫn và chạy. from chatterbot import ChatBot from chatterbot.conversation import Statement bot = ChatBot( 'Bot Thong Minh', storage_adapter='chatterbot.storage.MongoDatabaseAdapter', database_uri='duong dan' ) def get_feedback(): text = input() if 'yes' in text.lower(): return True elif 'no' in text.lower(): return False else: print('Please type either \"Yes\" or \"No\"') return get_feedback() while True: try: print('Type something...') input_statement = Statement(text=input()) response = bot.generate_response( input_statement ) print('\\nIs \"{}\" a coherent response to \"{}\"? \\n'.format( response.text, input_statement.text )) if get_feedback() is False: print('please input the correct one') correct_response = Statement(text=input()) bot.learn_response(correct_response, input_statement) print('Responses added to bot!') except (KeyboardInterrupt, EOFError, SystemExit): break ","date":"01-06-2021","objectID":"/chatterbot-python/:3:0","tags":["IT","Python","Artificial Intelligence"],"title":"Tạo một bot chat thông minh tự động học bằng python và Chatterbot.","uri":"/chatterbot-python/"},{"categories":["programming"],"content":"Tổng hợp các thủ thuật C++","date":"05-11-2020","objectID":"/cpp-tip-trick/","tags":["C++","IT","Competitive programming"],"title":"C++ tips \u0026 tricks","uri":"/cpp-tip-trick/"},{"categories":["programming"],"content":"Mở đầu Xin chào, bài viết này tóm tắt lại vài thủ thuật hay ho mà mình học được khi chuyển từ pascal sang C++. Đa số những thủ thuật này được sử dụng trong CP (Competitive programming). Template mình thường dùng #include \u003cbits/stdc++.h\u003e // inlucde tất cả thư viện có thể sử dụng khi đi CPusing namespace std; int main() { freopen(\"input.txt\", \"r\", stdin); // Đọc file bằng cin freopen(\"output.txt\", \"w\", stdout); // Xuất file bằng cout ios_base::sync_with_stdio(false); cin.tie(NULL); // Đọc xuất file nhanh // Code ở đây // Thời gian chạy của thuật toán cerr \u003c\u003c \"time taken : \" \u003c\u003c (float)clock() / CLOCKS_PER_SEC \u003c\u003c \" secs \\n\"; return 0; } Sử dụng marco để code nhanh hơn Ví dụ: long long x=4; pair\u003clong long,long long\u003e k; vector\u003clong long\u003e a; Có thể chuyển thành #define ll long long ll x=4; pair\u003cll, ll\u003e k; vector\u003cll\u003e a; So sánh endl và '\\n' cout\u003c\u003cendl; // In ký tự xuống dòng và flush stream cout\u003c\u003c'\\n'; // Chỉ in ký tự xuống dòng Ta thấy, sử dụng '\\n' sẽ nhanh hơn rất nhiều khi in một lượng lớn ký tự xuống dòng. Thực vậy, thử với 2 chương trình sau: for (int i = 0; i \u003c 1000000; i++) cout \u003c\u003c endl; // Run time: 2.463 secs for (int i = 0; i \u003c 1000000; i++) cout \u003c\u003c '\\n'; // Run time: 0.093 secs Hàm ước chung lớn nhất có sẵn Trong C++, có hàm __gcd(m,n) trả về giá trị ước chung lớn nhất của 2 số m và n. Độ phức tạp của thuật toán này là $ O(\\log_{2}{max(n,m)}) $. Sử dụng auto Từ phiên bản C++11 trở về sau, từ khóa auto được dùng để tự động nhận dạng kiểu dữ liệu thông qua kiểu dữ liệu của giá trị khởi tạo ra nó. auto a = 1; // 1 là kiểu int =\u003e a kiểu int auto b = 1.0F; // 1.0F là kiểu float =\u003e b kiểu float auto c = 1.0; // 1.0 là kiểu double =\u003e c kiểu double Độ dài tối đa của array Khi khai báo array trong hàm main() thì độ dài tối đa là $ 10^{6} $ nhưng khi ta khai báo biến toàn cục thì độ dài có thể lên tới $ 10^{7} $. Thư viện STL Thư viện STL là thứ mà mình thấy xịn nhất từ trước tới nay khi mình chuyển từ Pascal qua. Nó gần như giải quyết được mọi vấn đề mà Pascal phải tốn rất nhiều công sức mới làm được ^_^ ","date":"05-11-2020","objectID":"/cpp-tip-trick/:0:0","tags":["C++","IT","Competitive programming"],"title":"C++ tips \u0026 tricks","uri":"/cpp-tip-trick/"},{"categories":["programming"],"content":"Vector Vector làm việc giống như một “mảng động”. Khai báo: vector\u003ckiểu_dữ_liệu\u003e tên_biến. Sử dụng vector sẽ tốt khi: Truy cập đến phần tử riêng lẻ thông qu a vị trí của nó $ O(1) $ Chèn hay xóa ở vị trí cuối cùng $ O(1) $. Tìm hiểu thêm về Vector ","date":"05-11-2020","objectID":"/cpp-tip-trick/:1:0","tags":["C++","IT","Competitive programming"],"title":"C++ tips \u0026 tricks","uri":"/cpp-tip-trick/"},{"categories":["programming"],"content":"Priority Queue (Hàng đợi ưu tiên) Priority queue là một loại container adaptor, được thiết kế đặc biệt để phần tử ở đầu luôn luôn lớn nhất (theo một quy ước về độ ưu tiên nào đó) so với các phần tử khác. Khai báo: priority_queue \u003c int \u003e pq; // mặc định là lớn nhất // Sử dụng hàm so sánh khác priority_queue \u003c int,vector\u003cint\u003e,greater\u003cint\u003e \u003e q; Sử dụng priority queue sẽ tốt khi: Vừa thêm phần từ, vừa lấy phần tử lớn nhất (nhỏ nhất) ra. Thao tác thêm phần tử chỉ mất $ O(\\log{n})$ Tăng tốc độ thuật toán Dijkstra Tìm hiểu thêm về Priority Queue ","date":"05-11-2020","objectID":"/cpp-tip-trick/:2:0","tags":["C++","IT","Competitive programming"],"title":"C++ tips \u0026 tricks","uri":"/cpp-tip-trick/"},{"categories":["programming"],"content":"Set Set là một loại associative containers để lưu trữ các phần tử không bị trùng lặp (unique elements), và các phần tử này chính là các khóa (keys). Khai báo tương tự Priority Queue: set \u003cint\u003e s; set \u003cint, greater\u003cint\u003e \u003e s; Tìm hiểu thêm về Set ","date":"05-11-2020","objectID":"/cpp-tip-trick/:3:0","tags":["C++","IT","Competitive programming"],"title":"C++ tips \u0026 tricks","uri":"/cpp-tip-trick/"},{"categories":["programming"],"content":"Map Map là một loại associative container. Mỗi phần tử của map là sự kết hợp của khóa (key value) và ánh xạ của nó (mapped value). Cũng giống như set, trong map không chứa các khóa mang giá trị giống nhau. Khai báo: map \u003c kieu_du_lieu_1 , kieu_du_lieu_2 \u003e m; // kieu_du_lieu_1 là khóa, kieu_du_lieu_2 là giá trị của khóa. //Sử dụng class so sánh: struct cmp{ bool operator() (char a,char b) {return a\u003cb;} }; map \u003cchar,int,cmp\u003e m; Tìm hiểu thêm về Map ","date":"05-11-2020","objectID":"/cpp-tip-trick/:4:0","tags":["C++","IT","Competitive programming"],"title":"C++ tips \u0026 tricks","uri":"/cpp-tip-trick/"},{"categories":["programming"],"content":"Thư viện thuật toán Khai báo sử dụng: #include \u003calgorithm\u003e ","date":"05-11-2020","objectID":"/cpp-tip-trick/:5:0","tags":["C++","IT","Competitive programming"],"title":"C++ tips \u0026 tricks","uri":"/cpp-tip-trick/"},{"categories":["programming"],"content":"Sắp xếp: sort: sắp xếp đoạn phần tử theo một trình tự nào đó. Mặc định của sort là sử dụng operator \u003c. Bạn có thể sử dụng hàm so sánh, hay class so sánh tự định nghĩa để sắp xếp cho linh hoạt. int myints[] = {32,71,12,45,26,80,53,33}; sort (myints, myints+4); // (12 32 45 71)26 80 53 33 sort (myints, myints+8); // 12 26 32 33 45 53 71 80 ","date":"05-11-2020","objectID":"/cpp-tip-trick/:5:1","tags":["C++","IT","Competitive programming"],"title":"C++ tips \u0026 tricks","uri":"/cpp-tip-trick/"},{"categories":["programming"],"content":"Tìm kiếm nhị phân binary_search: tìm kiếm xem khóa có trong đoạn cần tìm không. Lưu ý: đoạn tìm kiếm phải được sắp xếp theo một trật tự nhất đinh. Nếu tìm được sẽ return true, ngược lại return false. Dạng 1: binary_search(vị trí bắt đầu, vị trí kết thúc, khóa) Dạng 2: binary_search(vị trí bắt đầu, vị trí kết thúc, khóa, phép so sánh) lower_bound: trả về iterator đến phần tử đầu tiên trong nửa đoạn [first,last] mà không bé hơn khóa tìm kiếm. Dạng 1: lower_bound( vị trí bắt đầu, vị trí kết thúc, khóa ) Dạng 2: lower_bound( vị trí bắt đầu, vị trí kết thúc, khóa , phép toán so sánh) upper_bound: trả về iterator đến phần tử đầu tiên trong nửa đoạn [first,last] mà lớn hơn khóa tìm kiếm. Dạng 1: upper_bound( vị trí bắt đầu, vị trí kết thúc, khóa ) Dạng 2: upper_bound( vị trí bắt đầu, vị trí kết thúc, khóa , phép toán so sánh) Và còn nhiều thuật toán nữa. Xem thêm về thư viện thuật toán ","date":"05-11-2020","objectID":"/cpp-tip-trick/:5:2","tags":["C++","IT","Competitive programming"],"title":"C++ tips \u0026 tricks","uri":"/cpp-tip-trick/"},{"categories":["programming"],"content":"Xem thêm thư viện STL http://www.cplusplus.com/reference/stl/?kw=stl ","date":"05-11-2020","objectID":"/cpp-tip-trick/:6:0","tags":["C++","IT","Competitive programming"],"title":"C++ tips \u0026 tricks","uri":"/cpp-tip-trick/"},{"categories":null,"content":"Xin chào, cảm ơn bạn đã ghé qua blog của mình. Mình vẫn chưa biết viết gì ở blog này nhưng mà mình nghĩ sẽ có nhiều thứ hay ho lắm. Các bạn cùng đón chờ nhé \u003c3 Mèo méo meo mèo meo ","date":"04-11-2020","objectID":"/first-post/:0:0","tags":null,"title":"First post","uri":"/first-post/"},{"categories":null,"content":" Chào mừng đến với blog của mình Mình tên là Ngô Phú Thịnh, 19 tuổi. Mình đến từ Cà Mau, nơi cuối bản đồ Việt Nam :\u003e Sinh viên năm 2 khoa toán tin trường Đại học Khoa học Tự Nhiên ĐHQG TP.HCM Mình thích lập trình, toán và guitar Mục đích mình tạo ra blog này Thấy vui nên làm thử :D ","date":"08-02-2019","objectID":"/about/:0:0","tags":null,"title":"About Me","uri":"/about/"},{"categories":null,"content":"Hành trình trở thành một Game Developer?","date":"01-01-0001","objectID":"/game_dev_logs/","tags":null,"title":"GameDev Log with Godot 3.3","uri":"/game_dev_logs/"},{"categories":null,"content":"01/06/2021 Just find this awesome tileset. I’m still learning to make a map so no progress xD Awesome tileset\"\rAwesome tileset\r I’m trying to make a map\"\rI’m trying to make a map\r 22/05/2021 Simple interact and dialog with NPC. NPC interaction\"\rNPC interaction\r 20/5/2021 Simple movement 2d platform. The character have 4 animation: IDLE, WALK, RUN, JUMP Simple movement 2d platform\"\rSimple movement 2d platform\r 19/5/2021 Trying to draw pixel art Honda Lead Pixel Art\"\rHonda Lead Pixel Art\r 18/05/2021 Learning to use Godot 3.3, make my first simple game. Demo, Github Dino the game\"\rDino the game\r ","date":"01-01-0001","objectID":"/game_dev_logs/:0:0","tags":null,"title":"GameDev Log with Godot 3.3","uri":"/game_dev_logs/"}]